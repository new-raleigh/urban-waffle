name: Deploy

# This action should file when the code is pushed on main or merged into main
on:
  push:
    branches:
      - main
  pull_request: {}
jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      TFE_TOKEN: ${{secrets.TFE_TOKEN}}
      GH_ACCESS_TOKEN: ${{secrets.GH_ACCESS_TOKEN}}
      TFE_ORGANIZATION_TOKEN: ${{secrets.TFE_ORGANIZATION_TOKEN}}
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 16.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci


    - name: Install dependencies
      run: |
        mkdir -p ~/.terraform.d
        cat <<EOT >> ~/.terraform.d/credentials.tfrc.json
        {
          "credentials": {
            "app.terraform.io": {
              "token": "$TFE_TOKEN"
            }
          }
        }
        EOT
        

    - name: Bootstrap
      run: |
        npx lerna bootstrap

    - name: Get Modules
      run: |
        npx lerna run get
        
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ github.run_number }}
        path: "**/*.zip"
    - id: artifact_name
      run: echo "::set-output name=artifact_name::${{ github.run_number }}"


  build:
    runs-on: ubuntu-latest
    needs: ci
    env:
      TFE_TOKEN: ${{secrets.TFE_TOKEN}}
      GH_ACCESS_TOKEN: ${{secrets.GH_ACCESS_TOKEN}}
      TFE_ORGANIZATION_TOKEN: ${{secrets.TFE_ORGANIZATION_TOKEN}}
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: ${{ needs.ci.outputs.artifact_name }}
        path: path/to/artifact
    - name: Build
      run: |
        npx lerna run build
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ github.run_number }}
        path: "**/*.zip"
    - id: artifact_name
      run: echo "::set-output name=artifact_name::${{ github.run_number }}"


  synth:
    runs-on: ubuntu-latest
    needs: build
    env:
      TFE_TOKEN: ${{secrets.TFE_TOKEN}}
      GH_ACCESS_TOKEN: ${{secrets.GH_ACCESS_TOKEN}}
      TFE_ORGANIZATION_TOKEN: ${{secrets.TFE_ORGANIZATION_TOKEN}}
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.artifact_name }}
        path: path/to/artifact

    - name: Synth
      run: |
        npx lerna run synth
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ github.run_number }}
        path: "**/*.zip"
    - id: artifact_name
      run: echo "::set-output name=artifact_name::${{ github.run_number }}"


  test:
    runs-on: ubuntu-latest
    needs: build
    env:
      TFE_TOKEN: ${{secrets.TFE_TOKEN}}
      GH_ACCESS_TOKEN: ${{secrets.GH_ACCESS_TOKEN}}
      TFE_ORGANIZATION_TOKEN: ${{secrets.TFE_ORGANIZATION_TOKEN}}
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.artifact_name }}
        path: path/to/artifact
    - name: Test
      run: |
        npx lerna run test
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ github.run_number }}
        path: "**/*.zip"
    - id: artifact_name
      run: echo "::set-output name=artifact_name::${{ github.run_number }}"


  plan-organization:
    runs-on: ubuntu-latest
    needs: [synth, test]
    env:
      TFE_TOKEN: ${{secrets.TFE_TOKEN}}
      GH_ACCESS_TOKEN: ${{secrets.GH_ACCESS_TOKEN}}
      TFE_ORGANIZATION_TOKEN: ${{secrets.TFE_ORGANIZATION_TOKEN}}
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: ${{ needs.synth.outputs.artifact_name }}
        path: path/to/artifact

    - name: Plan Organization
      run: |
        npx lerna run plan --scope organization

    - uses: actions/upload-artifact@v3
      with:
        name: ${{ github.run_number }}
        path: "**/*.zip"
    - id: artifact_name
      run: echo "::set-output name=artifact_name::${{ github.run_number }}"


  deploy-organization:
    runs-on: ubuntu-latest
    needs: plan-organization
    env:
      TFE_TOKEN: ${{secrets.TFE_TOKEN}}
      GH_ACCESS_TOKEN: ${{secrets.GH_ACCESS_TOKEN}}
      TFE_ORGANIZATION_TOKEN: ${{secrets.TFE_ORGANIZATION_TOKEN}}
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: ${{ needs.plan-organization.outputs.artifact_name }}
        path: path/to/artifact

    - name: Deploy Organization
      # if: github.ref == 'refs/heads/main'
      run: |
        npx lerna run deploy --scope organization

    - uses: actions/upload-artifact@v3
      with:
        name: ${{ github.run_number }}
        path: "**/*.zip"
    - id: artifact_name
      run: echo "::set-output name=artifact_name::${{ github.run_number }}"


  plan:
    runs-on: ubuntu-latest
    needs: deploy-organization
    env:
      TFE_TOKEN: ${{secrets.TFE_TOKEN}}
      GH_ACCESS_TOKEN: ${{secrets.GH_ACCESS_TOKEN}}
      TFE_ORGANIZATION_TOKEN: ${{secrets.TFE_ORGANIZATION_TOKEN}}
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: ${{ needs.deploy-organization.outputs.artifact_name }}
        path: path/to/artifact

    - name: Plan
      run: |
        npx lerna run plan --ignore organization

    - uses: actions/upload-artifact@v3
      with:
        name: ${{ github.run_number }}
        path: "**/*.zip"
    - id: artifact_name
      run: echo "::set-output name=artifact_name::${{ github.run_number }}"

  deploy:
    runs-on: ubuntu-latest
    needs: plan
    env:
      TFE_TOKEN: ${{secrets.TFE_TOKEN}}
      GH_ACCESS_TOKEN: ${{secrets.GH_ACCESS_TOKEN}}
      TFE_ORGANIZATION_TOKEN: ${{secrets.TFE_ORGANIZATION_TOKEN}}
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: ${{ needs.plan.outputs.artifact_name }}
        path: path/to/artifact
    - name: Deploy
      if: github.ref == 'refs/heads/main'
      run: |
        npx lerna run deploy --ignore organization

    - uses: actions/upload-artifact@v3
      with:
        name: ${{ github.run_number }}
        path: "**/*.zip"
    - id: artifact_name
      run: echo "::set-output name=artifact_name::${{ github.run_number }}"


    # - name: Publish
    #   run: |
    #     npx lerna publish from-package --yes

    # - name: Push
    #   run: |
    #     git push --follow-tags

    # - name: Cleanup
    #   run: |
    #     rm -rf ~/.terraform.d

    # - name: Slack Notification
    #   uses:
